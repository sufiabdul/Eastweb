package edu.sdstate.eastweb.prototype.filetransfer;

import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.zip.Adler32;

import org.apache.commons.io.FileUtils;

import edu.sdstate.eastweb.prototype.Config;

public class TransferClient extends Thread {
    private Throwable throwable;
    private String address;
    private String filename;
    private FileOutputStream fileOutput;
    private Socket socket;
    private ObjectInputStream input;
    private ObjectOutputStream output;

    /**
     * Downloads the specified file to the local file system.
     * 
     * @param filename relative filename of file to transfer
     * @throws Exception
     */
    public TransferClient(String address, String filename) {
        this.address = address;
        this.filename = filename;
    }

    @Override
    public void run() {
        try {
            socket = new Socket(
                    address,
                    Config.getInstance().getTransferPort()
            );

            output = new ObjectOutputStream(socket.getOutputStream());
            output.flush();
            input = new ObjectInputStream(socket.getInputStream());

            File localFile = new File(Config.getInstance().getRootDirectory(), filename);

            long length;
            long checksum;
            if (localFile.exists()) {
                length = localFile.length();
                checksum = FileUtils.checksum(localFile, new Adler32()).getValue();
            } else {
                length = 0;
                checksum = 0;
            }

            output.writeObject(new FileCheck(filename, length, checksum));
            Object object = input.readObject();
            if (object instanceof FileError) {
                FileError fileError = (FileError)object;

                input.close();
                output.close();

                throw fileError.getCause();
            } else if (object instanceof ShouldDownload) {
                ShouldDownload shouldDownload = (ShouldDownload)object;
                if (!shouldDownload.shouldDownload()) {
                    System.out.println("Download of " + filename + " unnecessary. Not downloading.");
                    input.close();
                    output.close();
                    return;
                }
            }


            // Create the local file's folder if it doesn't exist already
            if (!localFile.getParentFile().exists()) {
                FileUtils.forceMkdir(localFile.getParentFile());
            }

            // Open the local file for output
            fileOutput = new FileOutputStream(localFile);

            while (true) {
                object = input.readObject();

                if (object instanceof FileData) {
                    FileData fileData = (FileData)object;
                    fileOutput.write(fileData.getData());
                } else if (object instanceof FileError) {
                    FileError fileError = (FileError)object;

                    input.close();
                    output.close();
                    fileOutput.close();

                    FileUtils.forceDelete(localFile);

                    throw fileError.getCause();
                } else if (object instanceof FileComplete) {
                    input.close();
                    output.close();
                    fileOutput.close();

                    break;
                }
            }
        } catch (Throwable t) {
            throwable = t;
        }
    }

    public Throwable getThrowable() {
        return throwable;
    }

}
