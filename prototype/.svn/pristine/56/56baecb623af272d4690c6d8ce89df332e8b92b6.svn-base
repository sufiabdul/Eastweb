package edu.sdstate.eastweb.prototype.scheduler.tasks;

import java.io.*;
import java.util.*;
import org.apache.commons.io.FileUtils;
import edu.sdstate.eastweb.prototype.*;
import edu.sdstate.eastweb.prototype.download.*;
import edu.sdstate.eastweb.prototype.reprojection.*;
import edu.sdstate.eastweb.prototype.scheduler.framework.*;
import edu.sdstate.eastweb.prototype.util.FileHelper;

public class ReprojectModisTask implements RunnableTask {
    private final ProjectInfo mProject;
    private final ModisProduct mProduct;
    private final DataDate mDate;

    public ReprojectModisTask(ProjectInfo project, ModisProduct product, DataDate date) {
        mProject = project;
        mProduct = product;
        mDate = date;
    }

    private File getMetadataFile() throws ConfigReadException {
        return DirectoryLayout.getModisReprojectedMetadata(mProject, mProduct, mDate);
    }

    private ModisReprojectedMetadata makeMetadata() throws IOException {
        final List<ModisDownloadMetadata> downloads = new ArrayList<ModisDownloadMetadata>();
        for (ModisTile tile : mProject.getModisTiles()) {
            downloads.add(ModisDownloadMetadata.fromFile(
                    DirectoryLayout.getModisDownloadMetadata(mProduct, mDate, tile)));
        }

        return new ModisReprojectedMetadata(downloads, new Date().getTime());
    }

    @Override
    public boolean getCanSkip() {
        try {
            return ModisReprojectedMetadata.fromFile(getMetadataFile()).equalsIgnoreTimestamp(makeMetadata());
        } catch (IOException e) {
            return false;
        }
    }

    private File[] getInputFiles() throws ConfigReadException {
        final List<File> files = new ArrayList<File>();

        for (ModisTile tile : mProject.getModisTiles()) {
            files.add(DirectoryLayout.getModisDownload(mProduct, mDate, tile));
        }
        return files.toArray(new File[0]);
    }

    private boolean[] getBands() {
        switch (mProduct) {
        case NBAR:
            return new boolean[] { true, true, true, true, true, true, true };

        case LST:
            return new boolean[] { true, false, false, false, true, false, false, false, false,
                    false, false, false };

        default:
            throw new IllegalArgumentException();
        }
    }

    private int getNumExpectedFiles() {
        switch (mProduct) {
        case NBAR:
            return 7;

        case LST:
            return 2;

        default:
            throw new IllegalArgumentException();
        }
    }

    private File getOutputFile() throws IOException, ConfigReadException {
        return DirectoryLayout.getModisReprojected(mProject, mProduct, mDate);
    }

    @Override
    public void run() throws Exception {
        // Reproject
        final File outputFile = getOutputFile();
        FileUtils.forceMkdir(outputFile.getParentFile());
        new ModisReprojection().reprojectModis(getInputFiles(), getBands(),
                mProject.getProjection(), outputFile);

        // Run the TIFF fixer on each output and delete the original
        int numFilesFound = 0;
        for (File srcFile : outputFile.getParentFile().listFiles()) {
            if (srcFile.getName().startsWith("tmp.") && srcFile.getName().endsWith(".tif")) {
                ++numFilesFound;

                final File dstFile = new File(srcFile.getParentFile(),
                        srcFile.getName().replace("tmp.", ""));

                TiffFixer.fixTiff(srcFile, dstFile);
                FileUtils.forceDelete(srcFile);
            }
        }

        // Verify the expected output file count
        if (numFilesFound != getNumExpectedFiles()) {
            throw new Exception(String.format(
                    "Expected %d files, found %d",
                    getNumExpectedFiles(),
                    numFilesFound
            ));
        }

        // Write a metadata file
        final File metadataFile = getMetadataFile();
        FileUtils.forceMkdir(metadataFile.getParentFile());
        makeMetadata().toFile(metadataFile);
    }

    @Override
    public String getName() {
        return String.format(
                "Reproject and mosaic MODIS: project=\"%s\", product=%s, date=%s",
                mProject.getName(),
                mProduct,
                mDate.toCompactString()
        );
    }

    @Override
    public List<String> getOutputs() throws IOException {
        final List<String> outputs = new ArrayList<String>();

        // The output directory should include the metadata file
        for (File file : getOutputFile().getParentFile().listFiles()) {
            outputs.add(file.toString());
        }

        return FileHelper.getRelativeFilenames(
                Config.getInstance().getRootDirectory(), outputs);
    }

}