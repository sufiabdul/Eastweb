package edu.sdstate.eastweb.prototype.download;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;

import edu.sdstate.eastweb.prototype.Config;
import edu.sdstate.eastweb.prototype.ConfigReadException;
import edu.sdstate.eastweb.prototype.DataDate;

public class TrmmDownloader {

    private final TrmmProduct mProduct;
    private final DataDate mDate;
    private final File mOutFile;

    public TrmmDownloader(TrmmProduct product, DataDate date, File outFile) throws ConfigReadException {
        mProduct = product;
        mDate = date;
        mOutFile = outFile;
    }

    private static String getRootDirectory(TrmmProduct product) throws ConfigReadException {
        switch (product) {
        case TRMM_3B42:
            return "/ftp/data/TRMM/Gridded/Derived_Products/3B42_V7/Daily"; // FIXME: make configurable
        case TRMM_3B42RT:
            return "/ftp/data/TRMM/Gridded/Derived_Products/3B42RT/Daily"; // FIXME: make configurable
        default:
            throw new IllegalArgumentException("Product " + product + " not supported.");
        }
    }

    private static Pattern getFilePattern(TrmmProduct product) {
        switch (product) {
        case TRMM_3B42:
            return Pattern.compile("3B42_daily\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.7\\.bin");
        case TRMM_3B42RT:
            return Pattern.compile("3B42RT_daily\\.(\\d{4})\\.(\\d{2})\\.(\\d{2})\\.bin");
        default:
            throw new IllegalArgumentException("Product " + product + " not supported.");
        }
    }

    private static String getFilename(TrmmProduct product, DataDate date) {
        switch (product) {
        case TRMM_3B42:
            return String.format(
                    "3B42_daily.%04d.%02d.%02d.7.bin",
                    date.getYear(),
                    date.getMonth(),
                    date.getDay()
                    );
        case TRMM_3B42RT:
            return String.format(
                    "3B42RT_daily.%04d.%02d.%02d.bin",
                    date.getYear(),
                    date.getMonth(),
                    date.getDay()
                    );
        default:
            throw new IllegalArgumentException("Product " + product + " not supported.");
        }
    }

    /**
     * Builds and returns a list containing all of the available data dates no earlier than the specified
     * start date.
     * @param startDate Specifies the inclusive lower bound for the returned data date list
     * @throws IOException
     */
    public static final List<DataDate> listDates(TrmmProduct product, DataDate startDate) throws IOException {
        final Pattern yearDirPattern = Pattern.compile("\\d{4}");
        final Pattern dayOfYearDirPattern = Pattern.compile("\\d{3}");

        final FTPClient ftp = FtpClientPool.getFtpClient(Config.getInstance().getTrmmFtpHostName());
        try {
            if (!ftp.changeWorkingDirectory(getRootDirectory(product))) {
                throw new IOException("Couldn't navigate to directory: " + getRootDirectory(product));
            }

            // List years
            final List<DataDate> list = new ArrayList<DataDate>();
            for (FTPFile yearFile : ftp.listFiles()) {
                // Skip non-directory, non-year entries
                if (!yearFile.isDirectory() ||
                        !yearDirPattern.matcher(yearFile.getName()).matches()) {
                    continue;
                }

                final int year = Integer.parseInt(yearFile.getName());
                if (year < startDate.getYear()) {
                    continue;
                }

                // List days in this year
                final String yearDirectory = String.format("%s/%s", getRootDirectory(product), yearFile.getName());
                if (!ftp.changeWorkingDirectory(yearDirectory)) {
                    throw new IOException("Couldn't navigate to directory: " + yearDirectory);
                }

                for (FTPFile file : ftp.listFiles()) {
                    if (file.isFile() && getFilePattern(product).matcher(file.getName()).matches()) {
                        // Assume following format: {product name}.%y4.%m2.%d2.7.bin
                        String[] strings = file.getName().split("[.]");
                        final int month = Integer.parseInt(strings[2]);
                        final int day = Integer.parseInt(strings[3]);
                        final DataDate dataDate = new DataDate(day, month, year);
                        if (dataDate.compareTo(startDate) >= 0) {
                            list.add(dataDate);
                        }
                    }
                }
            }

            return list;
        } finally {
            FtpClientPool.returnFtpClient(Config.getInstance().getTrmmFtpHostName(), ftp);
        }
    }

    /**
     * Downloads a TRMM data set to the specified file.
     * @param date Data set date
     * @param outFile Destination file
     * @throws IOException
     */
    public final void download() throws IOException {
        final FTPClient ftp = FtpClientPool.getFtpClient(Config.getInstance().getTrmmFtpHostName());
        try {
            final String yearDirectory = String.format(
                    "%s/%04d",
                    getRootDirectory(mProduct),
                    mDate.getYear()
                    );
            if (!ftp.changeWorkingDirectory(yearDirectory)) {
                throw new IOException("Couldn't navigate to directory: " + yearDirectory);
            }

            DownloadUtils.download(ftp, getFilename(mProduct, mDate), mOutFile);
        } catch (IOException e) { // FIXME: ugly fix so that the system doesn't repeatedly try and fail
            try {
                Thread.sleep(10000);
            } catch (InterruptedException e1) {
                e1.printStackTrace();
            }
            throw e;
        } finally {
            FtpClientPool.returnFtpClient(Config.getInstance().getTrmmFtpHostName(), ftp);
        }
    }



}
