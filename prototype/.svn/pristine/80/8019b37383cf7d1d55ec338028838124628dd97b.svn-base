package edu.sdstate.eastweb.prototype.filetransfer;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.zip.Adler32;

import org.apache.commons.io.FileUtils;

import edu.sdstate.eastweb.prototype.Config;

public class TransferServer extends Thread {

    private static final int MAX_BYTES = 1024;
    private ServerSocket serverSocket;

    @Override
    public void run() {
        try {
            serverSocket = new ServerSocket(Config.getInstance().getTransferPort());
            while (true) {
                Socket socket = serverSocket.accept();
                FileTransferServerConnection connection = new FileTransferServerConnection(socket);
                connection.start();
            }
        } catch (SocketException e) {
            System.out.println("Shutting down file transfer...");
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("File transfer server shutdown.");
    }

    public void close() {
        try {
            serverSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public class FileTransferServerConnection extends Thread {

        private Socket socket;
        private ObjectInputStream input;
        private ObjectOutputStream output;
        private FileInputStream fileInput;

        public FileTransferServerConnection(Socket socket) throws Exception {
            this.socket = socket;
        }

        @Override
        public void run() {
            try {
                output = new ObjectOutputStream(socket.getOutputStream());
                output.flush();
                input = new ObjectInputStream(socket.getInputStream());

                FileCheck request = (FileCheck)input.readObject();

                // TODO: verify file request does not break out with '..'

                File file = new File(
                        Config.getInstance().getRootDirectory(),
                        request.getFilename()
                );

                if (!file.exists()) {
                    Exception e = new Exception("File " + file.toString() + " doesn't exist!");

                    e.printStackTrace();
                    try {
                        output.writeObject(new FileError(e));
                    } catch (IOException e2) {
                        e2.printStackTrace();
                    }
                    return;
                }

                boolean shouldDownload = true;
                if (request.getLength() == file.length()) {
                    System.out.println(file.getName() + " has same length as client file.");
                    long checksum = FileUtils.checksum(file, new Adler32()).getValue();
                    if (checksum == request.getChecksum()) {
                        System.out.println(file.getName() + " has same checksum as client file.");
                        shouldDownload = false;
                    }
                }
                System.out.println("Download " + file.getName() + "?: " + shouldDownload);
                output.writeObject(new ShouldDownload(shouldDownload));
                if (!shouldDownload) {
                    output.close();
                    input.close();
                    socket.close();
                    return;
                }

                fileInput = new FileInputStream(
                        file
                );

                while (fileInput.available() > 0) {
                    byte[] data = new byte[(fileInput.available() > MAX_BYTES) ? MAX_BYTES : fileInput.available()];

                    fileInput.read(data);
                    output.writeObject(new FileData(data));
                }

                output.writeObject(new FileComplete());

                // Clean up
                fileInput.close();
                output.close();
                input.close();
                socket.close();
            } catch (Exception e) {  // TODO: make these handle things better?
                e.printStackTrace();
                try {
                    output.writeObject(new FileError(e));
                } catch (IOException e2) {
                    e2.printStackTrace();
                }
            }
        }

    }

    public static void main(String[] args) throws Exception {
        TransferServer server = new TransferServer();
        server.run();
    }

}
